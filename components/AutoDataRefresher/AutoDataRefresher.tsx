'use client';

import React, { useEffect, useRef } from 'react';

interface AutoDataRefresherProps {
  /**
   * H√†m ƒë∆∞·ª£c g·ªçi ƒë·ªÉ l√†m m·ªõi d·ªØ li·ªáu
   */
  refreshFunction: () => void | Promise<void>;
  
  /**
   * Kho·∫£ng th·ªùi gian gi·ªØa c√°c l·∫ßn l√†m m·ªõi (t√≠nh b·∫±ng mili gi√¢y), m·∫∑c ƒë·ªãnh 30 gi√¢y
   */
  interval?: number;
  
  /**
   * C√≥ k√≠ch ho·∫°t l√†m m·ªõi t·ª± ƒë·ªông kh√¥ng
   */
  enabled?: boolean;
  
  /**
   * C√≥ l√†m m·ªõi ngay khi component mount kh√¥ng
   */
  refreshOnMount?: boolean;
  
  /**
   * C√≥ l√†m m·ªõi khi component unmount kh√¥ng
   */
  refreshOnUnmount?: boolean;
  
  /**
   * C√≥ l√†m m·ªõi khi tab ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i sau khi b·ªã ·∫©n kh√¥ng
   */
  refreshOnVisibilityChange?: boolean;
  
  /**
   * Children component
   */
  children?: React.ReactNode;
}

/**
 * Component ƒë·ªÉ t·ª± ƒë·ªông l√†m m·ªõi d·ªØ li·ªáu theo kho·∫£ng th·ªùi gian
 */
const AutoDataRefresher: React.FC<AutoDataRefresherProps> = ({
  refreshFunction,
  interval = 30000, // 30 gi√¢y
  enabled = true,
  refreshOnMount = true,
  refreshOnUnmount = false,
  refreshOnVisibilityChange = true,
  children,
}) => {
  // S·ª≠ d·ª•ng ref ƒë·ªÉ l∆∞u h√†m l√†m m·ªõi m·ªõi nh·∫•t
  const refreshFunctionRef = useRef(refreshFunction);
  
  // C·∫≠p nh·∫≠t ref khi h√†m l√†m m·ªõi thay ƒë·ªïi
  useEffect(() => {
    refreshFunctionRef.current = refreshFunction;
  }, [refreshFunction]);
  
  // Qu·∫£n l√Ω interval ƒë·ªÉ l√†m m·ªõi d·ªØ li·ªáu
  useEffect(() => {
    // N·∫øu kh√¥ng k√≠ch ho·∫°t, kh√¥ng l√†m g√¨ c·∫£
    if (!enabled) return;
    
    // H√†m ƒë·ªÉ g·ªçi h√†m l√†m m·ªõi
    const executeRefresh = () => {
      console.log('üîÑ Auto refreshing data...');
      try {
        refreshFunctionRef.current();
      } catch (error) {
        console.error('Error during auto data refresh:', error);
      }
    };
    
    // L√†m m·ªõi ngay khi mount n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if (refreshOnMount) {
      executeRefresh();
    }
    
    // ƒê·∫∑t interval ƒë·ªÉ l√†m m·ªõi ƒë·ªãnh k·ª≥
    const intervalId = setInterval(executeRefresh, interval);
    
    // X·ª≠ l√Ω s·ª± ki·ªán thay ƒë·ªïi kh·∫£ nƒÉng nh√¨n th·∫•y tab
    const handleVisibilityChange = () => {
      if (refreshOnVisibilityChange && document.visibilityState === 'visible') {
        console.log('üîÑ Tab became visible, refreshing data...');
        executeRefresh();
      }
    };
    
    // ƒêƒÉng k√Ω event listener cho s·ª± ki·ªán thay ƒë·ªïi kh·∫£ nƒÉng nh√¨n th·∫•y
    if (refreshOnVisibilityChange) {
      document.addEventListener('visibilitychange', handleVisibilityChange);
    }
    
    // Cleanup khi component unmount
    return () => {
      clearInterval(intervalId);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
      
      // L√†m m·ªõi khi unmount n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
      if (refreshOnUnmount) {
        executeRefresh();
      }
    };
  }, [enabled, interval, refreshOnMount, refreshOnUnmount, refreshOnVisibilityChange]);
  
  // Component n√†y kh√¥ng hi·ªÉn th·ªã g√¨ c·∫£, ch·ªâ tr·∫£ v·ªÅ children
  return <>{children}</>;
};

export default AutoDataRefresher; 