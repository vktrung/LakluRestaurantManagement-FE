import { useCallback, useEffect, useRef } from 'react';

/**
 * Custom hook ƒë·ªÉ x√≥a cache tr√¨nh duy·ªát
 * @param options - C√°c t√πy ch·ªçn c·∫•u h√¨nh
 * @param options.clearOnMount - C√≥ x√≥a cache khi component mount kh√¥ng
 * @param options.clearOnUnmount - C√≥ x√≥a cache khi component unmount kh√¥ng
 * @returns C√°c h√†m ƒë·ªÉ x√≥a cache
 */
const useClearCache = ({
  clearOnMount = false,
  clearOnUnmount = false,
} = {}) => {
  // Ref ƒë·ªÉ tr√°nh g·ªçi clearCache trong l·∫ßn render ƒë·∫ßu ti√™n tr√™n server
  const isMounted = useRef(false);

  /**
   * X√≥a t·∫•t c·∫£ cache c·ªßa tr√¨nh duy·ªát
   */
  const clearBrowserCache = useCallback(async () => {
    if (typeof window !== 'undefined' && 'caches' in window) {
      try {
        const keys = await caches.keys();
        await Promise.all(keys.map(key => caches.delete(key)));
        console.log('üßπ Browser caches cleared');
      } catch (error) {
        console.error('Failed to clear browser caches:', error);
      }
    }
  }, []);

  /**
   * X√≥a localStorage
   */
  const clearLocalStorage = useCallback(() => {
    if (typeof window !== 'undefined' && window.localStorage) {
      try {
        // L∆∞u tr·ªØ m·ªôt s·ªë gi√° tr·ªã quan tr·ªçng ƒë·ªÉ kh√¥i ph·ª•c sau
        const importantKeys = ['theme', 'sidebar-collapsed'];
        const savedValues: Record<string, string | null> = {};
        
        importantKeys.forEach(key => {
          savedValues[key] = window.localStorage.getItem(key);
        });
        
        window.localStorage.clear();
        
        // Kh√¥i ph·ª•c c√°c gi√° tr·ªã quan tr·ªçng
        importantKeys.forEach(key => {
          if (savedValues[key]) {
            window.localStorage.setItem(key, savedValues[key] as string);
          }
        });
        
        console.log('üßπ LocalStorage cleared (gi·ªØ l·∫°i c√°c gi√° tr·ªã UI quan tr·ªçng)');
      } catch (error) {
        console.error('Failed to clear localStorage:', error);
      }
    }
  }, []);

  /**
   * X√≥a sessionStorage
   */
  const clearSessionStorage = useCallback(() => {
    if (typeof window !== 'undefined' && window.sessionStorage) {
      try {
        window.sessionStorage.clear();
        console.log('üßπ SessionStorage cleared');
      } catch (error) {
        console.error('Failed to clear sessionStorage:', error);
      }
    }
  }, []);

  /**
   * X√≥a t·∫•t c·∫£ c√°c lo·∫°i cache
   */
  const clearAllCache = useCallback(async () => {
    // Ch·ªâ x√≥a cache tr√™n client-side
    if (typeof window !== 'undefined') {
      await clearBrowserCache();
      clearLocalStorage();
      clearSessionStorage();
      console.log('üßπ All caches cleared');
    }
  }, [clearBrowserCache, clearLocalStorage, clearSessionStorage]);

  useEffect(() => {
    // ƒê√°nh d·∫•u component ƒë√£ mount
    isMounted.current = true;
    
    // X√≥a cache khi component mount n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    if (clearOnMount && typeof window !== 'undefined') {
      // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o hydration ƒë√£ ho√†n t·∫•t
      const timer = setTimeout(() => {
        if (isMounted.current) {
          clearAllCache();
        }
      }, 500);
      
      return () => clearTimeout(timer);
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  useEffect(() => {
    // X√≥a cache khi component unmount n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
    return () => {
      if (clearOnUnmount && typeof window !== 'undefined' && isMounted.current) {
        clearAllCache();
      }
    };
  }, [clearOnUnmount, clearAllCache]);

  return {
    clearBrowserCache,
    clearLocalStorage,
    clearSessionStorage,
    clearAllCache,
  };
};

export default useClearCache; 